Короткое описание - FROM — задаёт родительский (главный) образ; LABEL — добавляет метаданные для образа. Хорошее место для размещения информации об авторе;
ENV — создаёт переменную окружения; RUN — запускает команды, создаёт слой образа. Используется для установки пакетов и библиотек внутри контейнера;
COPY  — копирует файлы и директории в контейнер; ADD  — делает всё то же, что и инструкция COPY. Но ещё может распаковывать локальные .tar файлы;
CMD — указывает команду и аргументы для выполнения внутри контейнера. Параметры могут быть переопределены. Использоваться может только одна инструкция CMD;
WORKDIR — устанавливает рабочую директорию для инструкции CMD и ENTRYPOINT; ARG — определяет переменную для передачи Docker’у во время сборки;
ENTRYPOINT — предоставляет команды и аргументы для выполняющегося контейнера. Суть его несколько отличается от CMD, о чём мы поговорим ниже; EXPOSE — открывает порт;
VOLUME — создаёт точку подключения директории для добавления и хранения постоянных данных. 
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
RUN - будет выполнять любые команды в новом слое поверх текущего изображения и фиксации результатов. Полученное зафиксированное изображение будет использовано на следующем шаге. 
То есть - это поле нужно для запуска команд и создания слоя в контейнере и установки необходимых пакетов в контейнер. Можно уменьшить кол-во слоев перенося команды таким образом.
RUN apt-get update && apt-get install -y \  (RUN apt-get update && apt-get install -yгарантирует, что ваш Dockerfile установит последние версии пакетов без ручного вмешательства)
    aufs-tools \                            ( RUN ["/bin/bash", "-c", "set -o pipefail && wget -O - https://some.site | wc -l > /number"] ) пример смены оболочки
    automake \

CMD и ENTRYPOINT - Требуется определить хотя бы одну инструкцию ENTRYPOINT или CMD для запуска. Если вы не определите ни одной из них, то получите сообщение об ошибке. 
Разница - RUN фактически запускает команду и фиксирует результат; CMD и не выполняет ничего во время сборки, но указывает команду, предназначенную для образа.
Это команда-аргумент запускаемая в контейнере и имеющая следующий вид - CMD и ENTRYPOINT ["executable", "param1", "param2"] Режим exec является рекомендуемым - это предпочтительная форма
Есть проблема запуска НЕ в режиме оболочки и она в том, что мы не можем воспользоваться преимуществами переменных среды (как $PATH) и прочими возможностями, которые предоставляет оболочка
Поскольку мы не можем воспользоваться переменной среды $PATH нужно указать точное путь к исполняемому файлу - это частая операция типа - CMD ["/bin/ping","localhost"] 
Вторая проблема: символы подстановки интерпретируются самой оболочкой, поэтому строка *.jar не будет корректно обработана. 
CMD и ENTRYPOINT - CMD ls /usr или другая команда - можно и с оболочкой если уверены что отработает корректно, ибо иногда бывают недоразумения  
Режим exec рекомендуемый: Это из-за того что контейнеры задуманы так чтобы содержать один процесс. отправленные cигналы внутри перенаправляются процессу в контейере с идентификатором PID1 
Чтобы проверить это можно запустить контейнер ping и попытаться нажать ctrl + c для остановки контейнера. Контейнер, определенный с помощью режима exec, успешно завершает работу.
При использовании режима "shell" контейнер работает не так и оболочка не завершит работу
При использовании exec команда работает с идентификатором процесса PID, равным 1, а процесс sh -c отсутствует. Имейте в виду, что работает так же, если использовать CMD вместо ENTRYPOINT.
И для CMD, и для ENTRYPOINT существуют режимы shell и exec. Если во время выполнения определена только одна из инструкций, то и CMD и ENTRYPOINT будут иметь одинаковый эффект. 
Если вы используете режим shell для ENTRYPOINT, ниже определенная CMD игнорируется, но если использовать режим exec для ENTRYPOINT - аргументы определенные ниже в CMD добавляются в конце
Пример с exec выглядит так - ENTRYPOINT ["ls", "/usr"] а ниже без указания команды указываем поле CMD ["/var"] и можно увидеть вывод содержимого в двух папках. Или подругому...
ENTRYPOINT ["ping"] а ниже CMD ["www.google.com"] сначала утилита потом аргумент
При использовании режима exec для инструкции ENTRYPOINT необходимо использовать режим exec и для инструкции CMD. 
Если этого не сделать, Docker попытается добавить sh -c в уже добавленные аргументы, что может привести к некоторым непредсказуемым результатам.
Инструкции ENTRYPOINT и CMD могут быть переопределены с помощью флагов командной строки - Флаг --entrypoint может быть использован, чтобы переопределить инструкцию ENTRYPOINT
docker run --entrypoint [entrypoint] test - это для ENTRYPOINT. docker run test [command 1] [arg1] [arg2] - это для CMD
