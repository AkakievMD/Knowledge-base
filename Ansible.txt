--- (начало любого playbook)
- name: install (имя Playbook)
  hosts: angeloT2 (хост на котором будет выполнятся задание)
  become: yes (значит что нужно выполнить от root)

  vars: (под ним создаем переменные со значениями)
    source_file: ./hallo.txt (имя пременной и ее значение, если копируем из одного в другой то нужно правильно указать откуда берем и куда отправляем)
    destin_file: /root/ansible/hi.txt (имя пременной и ее значение)
    secret: 30968350640690  (переменная)  

  tasks: (ниже создаем параметры задания)
  - name: install packs (имя задания)
    vars: (ниже перечисляем пакеты которые планируем установить ввиде списка переменных, этот способ подходит если нужно сделать много установок не создавая для каждой программы задачу) 
      packages: (создаем переменную и перечисляем пакеты и программы)
       - wget 
       - mc
       - neofetch
       - curl
       - git
    apt: name='{{ packages }}' state=latest (пакетный менедер, имя того что устанавливаем и статус версии)
    
  - shell: apt list --upgradable && apt upgrade или так touch /root/red.txt (пример того как запускать команды на удаленном хосте)
  - shell: uptime (если хочешь посмотреть результат команды на контроллере то его можно сохранить в переменную) 
    register: result (модуль сохранения вывода, создаем переменную в которую запишем вывод)

  - debug: (ниже указываем переменную из которой считаем результат команды на удаленном хосте)
      var: result (переменная из модуля register)

  - name: install web (имя задания, разовая установка)
    yum: name=nginx state=latest (пакетный менедер, имя того что устанавливаем и статус версии)

  - name: Coping Myhome (имя задания)
    copy: src={{ source_file }} dest={{ destin_file }} mode=0777 (модуль копирования, указываем переменную откуда берем и куда отправляем и права которые присвоятся файлу)
    notify: Restart web (напоминание что нужно сделать рестарт службы в этой точке, отсюда его и вызываем)

  - debug: (ниже узазываем переменную значение которой хотим на выводе) (просто выводит в консоль)
      var: secret (переменная)

  - debug: (ниже можно указать ввиде сообщения с переменной) (иной пример)
      msg: "Secretnoe {{ secret }}" (вывод в виде сообщения)

  - name: start web (имя задания)
    service: name=nginx state=started enabled=yes (модуль сервиса, имя сервиса, ожидаемое состояние и состояние в которое нужно привести)
   
  handlers: (для перезапуска служб и сам по себе он не сработает, его нужно вызвать в указанной точке в playbook) 
  - name: Restart web (имя задания)
    service: name=nginx state=restarted (модуль сервиса, имя сервиса, ожидаемое состояние)

