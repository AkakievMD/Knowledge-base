API-сервер
Сервер Kube API предоставляет доступ к Kubernetes REST API.
Он не обладает состоянием и хранит все данные в кластере etcd, поэтому его несложно горизонтально масштабировать. 
API-сервер олицетворяет собой панель управления Kubernetes.

Etcd — это высоконадежное распределенное хранилище данных. 
Kubernetes хранит в нем все состояние своих кластеров. 
В небольших временных кластерах etcd можно запускать в единственном экземпляре и на одном узле с ведущими компонентами. 
В важных системах, требующих избыточности и высокой доступности, etcd обычно работает в виде кластера, состоящего из трех или даже пяти узлов.

Диспетчер контроллеров Kube представляет собой набор различных управляющих инструментов, упакованных в единый двоичный файл. 
Он содержит контроллер репликации, pod-контроллер, контроллер сервисов, контроллер конечных точек и т. д. 
Все эти инструменты отслеживают работу кластера через API и при необходимости приводят его в нужное состояние.

Кластер — это набор компьютеров, хранилищ данных и сетевых ресурсов, с помощью которых Kubernetes выполняет различные задачи в вашей системе. 
Стоит отметить, что система может состоять из нескольких кластеров.

Компонент kube-scheduler занимается планированием развертывания подов на узлах. 
Это крайне сложная задача, которая требует учета множества факторов, зависящих друг от друга, например: требований к ресурсам; ограничений и допусков; местонахождения данных;
требований к сервисам; политики аппаратных/программных ограничений; принадлежности и непринадлежности узлов; принадлежности и непринадлежности подов; предельных сроков.

Начиная с версии 1.3, в стандартный кластер Kubernetes входит DNS-сервер. 
Он размещается в обычном поде и назначает имена всем сервисам, кроме неуправляемых. 
Поды тоже могут иметь DNS-имена. Это крайне удобно для автоматического обнаружения.

Прокси-сервер Kube отвечает за низкоуровневые сетевые функции на каждом узле. 
Он предоставляет локальный доступ к сервисам Kubernetes и может выполнять перенаправление в TCP и UDP. 
Для поиска IP-адресов в кластере используются переменные среды или DNS.

Kubelet — это представитель Kubernetes в узле. 
Он отвечает за взаимодействие с ведущими компонентами и управляет запущенными подами. 
Его обязанности: загрузка конфиденциальных данных пода с API-сервера; подключение томов; запуск контейнера пода (через CRI или rkt); 
уведомление о состоянии узла и каждого экземпляра пода; проверка работоспособности контейнеров.

AppArmor — это модуль безопасности в ядре Linux. 
С его помощью можно ограничить набор ресурсов, доступных процессу внутри контейнера, например доступ к сети и файлам, а также возможности Linux. 
Для конфигурации AppArmor используются профили.

Режимы доступа томов
Существует три режима доступа:
ReadOnlyMany — можно подключать к нескольким узлам в режиме чтения;
ReadWriteOnce — можно подключать к одному узлу в режиме чтения и записи;
ReadWriteOnce — можно подключать к нескольким узлам в режиме чтения и записи

kube-apiserver — это внешний сервер для управляющего уровня, который обрабатывает API-запросы.
etcd — база данных, в которой Kubernetes хранит всю информацию о существующих узлах, ресурсах кластера и т. д.
kube-scheduler определяет, где будут запущены свежесозданные pod-оболочки.
kube-controller-manager отвечает за запуск контроллеров ресурсов, таких как развертывания.
cloud-controller-manager взаимодействует с облачным провайдером (в облачных кластерах), управляя такими ресурсами, как балансировщики нагрузки и дисковые тома.

Каждый рабочий узел в кластере Kubernetes отвечает за следующие компоненты.
kubelet отвечает за управление средой выполнения контейнера, в которой запускаются рабочие задания, запланированные для узла, а также за мониторинг их состояния.
kube-proxy занимается сетевой магией, которая распределяет запросы между pod-оболочками на разных узлах, а также между pod-оболочками и Интернетом.
Среда выполнения контейнеров запускает и останавливает контейнеры, а также отвечает за их взаимодействие. 
Обычно это Docker, хотя Kubernetes поддерживает и другие среды выполнения контейнеров, такие как rkt и CRI-O.
Кроме как выполнением разных программных компонентов, ведущие и рабочие узлы принципиально ничем не отличаются. 
Хотя ведущий узел обычно не выполняет пользовательские рабочие задания, исключение составляют очень маленькие кластеры (такие как Docker Desktop или Minikube).

Pod-оболочка — это фундаментальная единица работы в Kubernetes, которая определяет один или несколько контейнеров
взаимодействующих между собой и запланированных к одновременному выполнению.
Развертывание — высокоуровневый ресурс Kubernetes, который декларативным образом управляет pod-оболочками
их доставкой, планированием, обновлением и перезапуском, когда это необходимо.
Сервис в Kubernetes — это эквивалент балансировщика нагрузки или прокси
который направляет трафик к подходящим pod-оболочкам через единый, публичный и долгосрочный IP-адрес или доменное имя.

Планировщик Kubernetes ищет pod-оболочки, которые еще нигде не выполняются, находит для них подходящие узлы и приказывает утилите kubelet запустить эти pod-оболочки на найденных узлах
Такие ресурсы, как развертывания, представлены записями во внутренней базе данных Kubernetes. Внешне эти ресурсы могут иметь форму текстовых файлов 
(известных как манифесты) в формате YAML. Манифест — это объявление желаемого состояния ресурса.
kubectl — основной инструмент для взаимодействия с Kubernetes, который позволяет применять манифесты, запрашивать данные о ресурсах, вносить изменения, удалять ресурсы и многое другое

Понятия платформы Docker
Docker – это платформа для упаковки, распространения и выполнения приложений. Как мы уже говорили, она позволяет упаковывать приложение вместе со всей его средой. 
Это могут быть либо несколько библиотек, которые требуются приложению, либо даже все файлы, которые обычно доступны в файловой системе установленной операционной системы. 
Docker позволяет переносить этот пакет в центральный репозиторий, из которого он затем может быть перенесен на любой компьютер, на котором работает Docker, и выполнен там

Понятие пространства имен
Пространства имен предназначены для использования в средах с большим количеством пользователей, распределенных по нескольким командам или проектам. 
Для кластеров с несколькими или десятками пользователей вам вообще не нужно создавать или думать о пространствах имен. 
Начните использовать пространства имен, когда вам понадобятся предоставляемые ими функции.
Пространства имен предоставляют область для имен. Имена ресурсов должны быть уникальными в пределах пространства имен, но не в разных пространствах имен. 
Пространства имен не могут быть вложены друг в друга, и каждый ресурс Kubernetes может находиться только в одном пространстве имен.
Пространства имен - это способ разделить ресурсы кластера между несколькими пользователями (через квоту ресурсов ).
Нет необходимости использовать несколько пространств имен для разделения немного разных ресурсов, например разных версий одного и того же программного обеспечения: 
используйте этикетки чтобы различать ресурсы в одном пространстве имен.